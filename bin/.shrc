set -ue

SHRC_DIR="$(cd "$(dirname "$0")" && pwd)"


# /* configuration

BASE_DIR="$(cd "$SHRC_DIR/.." && pwd)"
VAR_DIR="$BASE_DIR/var"
CACHE_DIR="$VAR_DIR/cache"
BIN_DIR="$BASE_DIR/bin"
VENDOR_DIR="$BASE_DIR/vendor"
NODE_MODULES_DIR="$BASE_DIR/node_modules"
VENDOR_BIN_DIR="$VENDOR_DIR/bin"
TOOLS_DIR="$BASE_DIR/support/tools"
SYMFONY_CONSOLE="$BASE_DIR/bin/console"
UNSAFE_BINS_FLAG="$VAR_DIR/.allow_unsafe_bins"
DOTENV_FILE="$BASE_DIR/.env"
DOTENV_LOCAL_FILE="$BASE_DIR/.env.local"

# configuration */



__load_env() {
    local env_backup="$(export -p)"

    set -a

    for f in $@; do
        test -f "$f" && . "$f"
    done

    eval "$env_backup"

    set +a
}

unsafe_bin() {
    if [ -n "${UNSAFE_BINS_FLAG:-}" -a -f "$UNSAFE_BINS_FLAG" ]; then
        return
    fi

    echo "The script '$0' is unsafe and can lead to data loss. If nevertheless you want to run it, create file '$UNSAFE_BINS_FLAG'"
    exit 1
}

exec_console() {
    "$SYMFONY_CONSOLE" "$@"
}

exec_composer() {
    exec_bin composer "$@"
}

exec_bin() {
    local bin="$1"
    shift
    "$BIN_DIR/$bin" "$@"
}

exec_vendor_bin() {
    local bin="$1"
    shift
    "$VENDOR_BIN_DIR/$bin" "$@"
}

exec_tool() {
    local tool="$1"
    shift
    exec "$TOOLS_DIR/$tool" "$@"
}

write_title() {
    echo "======= $@"
}

write_line() {
    echo " * $@"
}

get_switch() {
    if [ ! -z "$2" ]; then
        echo -n "$1$2"
    fi
}

parse_database_url() {
    local url="$1"
    local var_prefix="$2"

    eval "$(cat <<- EOM | php -- "$url" "$var_prefix"
<?php isset(\$argv[1]) || exit(1);
\$parsed = parse_url(\$argv[1]); \$prefix = \$argv[2] ?? "";
foreach (['host'=>'','port'=>'','user'=>'','pass'=>'','path'=>''] as \$k => \$v) {
if (isset(\$parsed[\$k])) { \$v = \$parsed[\$k]; };
if (\$k === 'path') { \$k = 'name'; \$v = substr(\$v, 1); }
echo \$prefix.strtoupper(\$k)."=\"{\$v}\"\n";
}
EOM
)"
}


__load_env "$DOTENV_FILE" "$DOTENV_LOCAL_FILE"
unset -f __load_env

if [ -z "${SHRC_NO_CD:-}" ]; then
    cd $BASE_DIR
fi
